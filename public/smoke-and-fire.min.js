(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * The code that governs time.
 * Author: Xavier Ho <xavier.ho@csiro.au>
 * See README.md for licenses and credits.
 */

var clock = new THREE.Clock();
var _time = 0;
var speed = 1;

exports.setSpeed = function (s) {
  speed = Number(s);
}

var time = exports.time = function () {
  return _time;
};

var tick = exports.tick = function () {
  _time += clock.getDelta() * speed;
  return _time;
}
},{}],2:[function(require,module,exports){
/**
 * Geometry loader and maintenance functions for spherical projected datasets.
 * Author: Xavier Ho <xavier.ho@csiro.au>
 * See README.md for licenses and credits.
 */
var clock = require('./clock');
var shaders = require('./shaders');
var renderer = require('./renderer');
var xhr = new THREE.XHRLoader();

// Create a plane based on geographical boundary rectangle
var boundedPlane = exports.boundedPlane = function ( boundary, w, h ) {
  w = w || 32;
  h = h || 32;

  var dw = (boundary[2] - boundary[0]) / (w-1);
  var dh = (boundary[3] - boundary[1]) / (h-1);
  var geometry = new THREE.PlaneGeometry(1, 1, w-1, h-1);

  for (var y = 0; y < h; y++) {
    for (var x = 0; x < w; x++) {
      var i = y * w + x;
      geometry.vertices[i].x = boundary[0] + dw * x;
      geometry.vertices[i].y = boundary[1] + dh * y;
      geometry.vertices[i].z = 0;
    }
  }

  return geometry;
};


// -------------------------------------------------------------------------
// ## geo.load2DGrid(url, success, progress, error)
// ## geo.loadPoints(url, success, progress, error)
//
// Retrieves geolocation data from `url`. The data should be formatted as
// described in `../scripts/data_web_converter.py`. The function runs async.
//
// url        URL to retrieve data from.
// success    Callback function with one argument of the loaded object.
// progress   Repeatedly runs when data is still loading. Argument is loading
//            progress information.
// error      Runs when loading fails. Argument is error information.
//
exports.load2DGrid = function (url, success, progress, error) {
  xhr.load(url, function (data) {
    var object = {};
    object.data = JSON.parse(data);

    var pData = object.data[0].data;
    var pFactor = object.data[0].factor || 1.0;

    var width = object.data[0].boundary[1] - object.data[0].boundary[0],
        height = object.data[0].boundary[3] - object.data[0].boundary[2],
        y_length = pData.length,
        x_length = pData[0].length,
        dw = width / (x_length - 1),
        dh = height / (y_length - 1);

    object.geometry = new THREE.PlaneGeometry(width, height, x_length-1, y_length-1);
    object.geometry.dynamic = true;

    for (var y = 0; y < y_length; y++) {
      for (var x = 0; x < x_length; x++) {
        var i = y * x_length + x;
        var z = pData[y][x] * pFactor;
        object.geometry.vertices[i].x = object.data[0].boundary[0] + dw * x;
        object.geometry.vertices[i].y = object.data[0].boundary[2] + dh * y;
        object.geometry.vertices[i].z = z;
      }
    }

    object.shader = shaders['ubershader'];
    object.material = new THREE.ShaderMaterial({
      uniforms: THREE.UniformsUtils.clone(object.shader.uniforms),
      vertexShader: object.shader.vertexShader,
      fragmentShader: object.shader.fragmentShader,
      depthTest: false,
      transparent: true,
      blending: THREE.CustomBlending,
      blendEquation: THREE.MaxEquation,
      side: THREE.DoubleSide
    });

    object.mesh = new THREE.Mesh(object.geometry, object.material);
    object.mesh.frustumCulled = false;
    object.ready = true;

    success(object);
  },
  function ( prog ) { if (typeof progress === 'function') progress(prog); },
  function ( err ) { if (typeof error === 'function') error(err); });
};


exports.loadGeoImage = function ( url, success, progress, error ) {
  xhr.load(url, function (data) {
    var object = {};
    var metadata = JSON.parse(data);
    var boundary = metadata.corners_lon_lat.upper_left.concat(metadata.corners_lon_lat.lower_right);
    object.geometry = boundedPlane(boundary);

    var path = url.split('/');
    path.pop();
    path.push(metadata.filename);
    path = path.join('/');

    var map = THREE.ImageUtils.loadTexture(path);
    map.minFilter = THREE.NearestFilter;

    // Hardcoded image paths for now
    object.imageUrls = [
      'IDE00435.201510272140.jpg',
      'IDE00435.201510272150.jpg',
      'IDE00435.201510272200.jpg',
      'IDE00435.201510272210.jpg',
      'IDE00435.201510272220.jpg',
      'IDE00435.201510272230.jpg',
      'IDE00435.201510272240.jpg',
      'IDE00435.201510272250.jpg',
      'IDE00435.201510272300.jpg',
      'IDE00435.201510272310.jpg',
      'IDE00435.201510272320.jpg',
      'IDE00435.201510272330.jpg',
      'IDE00435.201510272340.jpg',
      'IDE00435.201510272350.jpg',
      'IDE00435.201510280000.jpg',
      'IDE00435.201510280010.jpg',
      'IDE00435.201510280020.jpg',
      'IDE00435.201510280030.jpg',
      'IDE00435.201510280040.jpg',
      'IDE00435.201510280050.jpg',
      'IDE00435.201510280100.jpg',
      'IDE00435.201510280110.jpg',
      'IDE00435.201510280120.jpg',
      'IDE00435.201510280130.jpg',
      'IDE00435.201510280140.jpg',
      'IDE00435.201510280150.jpg',
      'IDE00435.201510280200.jpg',
      'IDE00435.201510280210.jpg',
      'IDE00435.201510280220.jpg',
      'IDE00435.201510280230.jpg',
      'IDE00435.201510280250.jpg',
      'IDE00435.201510280300.jpg',
      'IDE00435.201510280310.jpg',
      'IDE00435.201510280320.jpg',
      'IDE00435.201510280330.jpg',
      'IDE00435.201510280340.jpg',
      'IDE00435.201510280350.jpg',
      'IDE00435.201510280400.jpg',
      'IDE00435.201510280410.jpg',
      'IDE00435.201510280420.jpg',
      'IDE00435.201510280430.jpg',
      'IDE00435.201510280440.jpg',
      'IDE00435.201510280450.jpg',
      'IDE00435.201510280500.jpg',
      'IDE00435.201510280510.jpg',
      'IDE00435.201510280520.jpg',
    ];

    object.images = [];

    // Preload the images
    setTimeout( function () {
      object.imageUrls.forEach( function ( url ) {
        var image = THREE.ImageUtils.loadTexture('images/himawari/' + url);
        image.minFilter = THREE.NearestFilter;
        object.images.push(image);
      });
    }, 0);

    object.shader = shaders['ubershader'];
    object.material = new THREE.ShaderMaterial({
      uniforms: THREE.UniformsUtils.clone(object.shader.uniforms),
      vertexShader: object.shader.vertexShader,
      fragmentShader: shaders.image.fragmentShader,
      depthTest: false,
      transparent: true,
      blending: THREE.CustomBlending,
      blendEquation: THREE.MaxEquation,
      side: THREE.DoubleSide
    });
    object.material.uniforms.map.value = map;

    object.mesh = new THREE.Mesh(object.geometry, object.material);
    object.mesh.frustumCulled = false;
    object.ready = true;

    success(object);
  },
  function ( prog ) { if (typeof progress === 'function') progress(prog); },
  function ( err ) { if (typeof error === 'function') error(err); });
};


exports.loadPoints = function ( url, success, progress, error ) {
  var object = {};

  xhr.load(url, function (data) {
    object.data = JSON.parse(data);
    var d = object.data[0].data;
    object.length = d.length; // Maximum number of point cloud points.
    var factor = object.data[0].factor;

    var geometry = new THREE.Geometry();
    object.shader = shaders['ubershader'];
    object.material = new THREE.ShaderMaterial({
      uniforms: THREE.UniformsUtils.clone(object.shader.uniforms),
      vertexShader: object.shader.vertexShader,
      fragmentShader:  shaders['pointcloud'].fragmentShader,
      transparent: true,
      depthTest: false,
    });
    object.material.uniforms.size.value = 3;
    object.material.uniforms.time.value = time;

    for (var i = 0; i < object.length; i++) {
      if (i >= d.length) {
        var x = 0;
        var y = 90;
        var z = 0;
      } else {
        var x = d[i][0] * factor;
        var y = d[i][1] * factor;
        var z = d[i][2] * factor;
      }
      geometry.vertices.push(new THREE.Vector3(x, y, z));
    }
    object.mesh = new THREE.PointCloud(geometry, object.material);
    object.mesh.frustumCulled = false;
    object.ready = true;

    success(object);
  },
  function ( prog ) { if (typeof progress === 'function') progress(prog); },
  function ( err ) { if (typeof error === 'function') error(err); });
};

// -------------------------------------------------------------------------
// ## update2DGrid(object)
// ## updateLines(object)
// ## updatePoints(object)
//
// Updates the object mesh based on data set and clock.time().
exports.update2DGrid = function (object) {
  if (!object.ready) return;
  var time = clock.time();

  var ia = Math.floor(time) % object.data.length;
  var ib = Math.ceil(time) % object.data.length;
  var dt = Math.ceil(time) - time;

  var pData_a = object.data[ia].data;
  var pData_b = object.data[ib].data;
  var pFactor_a = object.data[ia].factor;
  var pFactor_b = object.data[ib].factor;

  var y_length = pData_a.length;
  var x_length = pData_a[0].length;

  for (var y = 0; y < y_length; y++) {
    for (var x = 0; x < x_length; x++) {
      var i = y * x_length + x;
      var a = pData_a[y][x] * dt * pFactor_a;
      var b = pData_b[y][x] * (1 - dt) * pFactor_b;
      var z = a + b;
      object.mesh.geometry.vertices[i].z = z;
    }
  }
  object.mesh.geometry.verticesNeedUpdate = true;
};

exports.updatePoints = function ( object ) {
  if (!object.ready) return;
  var time = clock.time();
  object.material.uniforms.time.value = time;

  var t = Math.floor(time) % object.data.length;
  var pData = object.data[t].data;
  var pFactor = object.data[t].factor;
  var dt = Math.ceil(time) - time;

  for (var i = 0; i < object.length; i++) {
    if (i >= pData.length) {
      object.mesh.geometry.vertices[i].x = 0;
      object.mesh.geometry.vertices[i].y = 90;
      object.mesh.geometry.vertices[i].z = 0;
    } else {
      var x = pData[i][0] * pFactor;
      var y = pData[i][1] * pFactor;
      var z = pData[i][2] * pFactor;
      object.mesh.geometry.vertices[i].x = x;
      object.mesh.geometry.vertices[i].y = y;
      object.mesh.geometry.vertices[i].z = z;
    }
  }
  object.mesh.geometry.verticesNeedUpdate = true;
};

exports.updateGeoImage = function ( object ) {
  if (!object.ready) return;
  var time = clock.time();

  var t = Math.floor(time) % object.images.length;
  object.material.uniforms.map.value = object.images[t];
  object.material.uniforms.map.needsUpdate = true;
};
},{"./clock":1,"./renderer":6,"./shaders":8}],3:[function(require,module,exports){
/**
 * Misc. tools to work with geometries.
 * Author: Xavier Ho <xavier.ho@csiro.au>
 * See README.md for licenses and credits.
 */
var shaders = require('./shaders');

// -------------------------------------------------------------------------
// ## makeBoundary([minLat, maxLat, minLon, maxLon])
// Draws a boundary rectangle on specified boundary.
// boundary = [minLat, maxLat, minLon, maxLon]
exports.makeBoundary = function ( boundary ) {
  var geometry = new THREE.Geometry();

  // Draw 4 sides with many segments so it projects nicely
  var x, y;
  var segments = 32; // should be enough for a "smooth" curve look on a globe
  for (y = boundary[2]; y < boundary[3]; y += (boundary[3] - boundary[2]) / segments) {
    geometry.vertices.push(new THREE.Vector3(boundary[0], y, 0));
  }
  for (x = boundary[0]; x < boundary[1]; x += (boundary[1] - boundary[0]) / segments) {
    geometry.vertices.push(new THREE.Vector3(x, boundary[3], 0));
  }
  for (y = boundary[3]; y > boundary[2]; y -= (boundary[3] - boundary[2]) / segments) {
    geometry.vertices.push(new THREE.Vector3(boundary[1], y, 0));
  }
  for (x = boundary[1]; x > boundary[0]; x -= (boundary[1] - boundary[0]) / segments) {
    geometry.vertices.push(new THREE.Vector3(x, boundary[2], 0));
  }
  // Close the line
  geometry.vertices.push(new THREE.Vector3(boundary[0], boundary[2], 0));

  var shader = shaders['ubershader'];
  var material = new THREE.ShaderMaterial({
    uniforms: THREE.UniformsUtils.clone(shader.uniforms),
    vertexShader: shader.vertexShader,
    fragmentShader: shader.fragmentShader,
    linewidth: 2,
    depthTest: false,
    transparent: true,
    wireframe: true
  });
  material.uniforms.r.value = 151 / 255;
  material.uniforms.g.value = 252 / 255;
  material.uniforms.b.value = 151 / 255;
  material.uniforms.staticValue.value = 1;
  var mesh = new THREE.Line(geometry, material);

  mesh.frustumCulled = false;
  mesh.ready = true;
  return mesh;
}
},{"./shaders":8}],4:[function(require,module,exports){
/**
 * Loading bar display.
 * Author: Xavier Ho <xavier.ho@csiro.au>
 * See README.md for licenses and credits.
 */
var GUI_loading = exports.GUI = document.getElementById('loading');
var cb;

//  ----------------------------------------------------------------------------
//  ## loadingbar.toDownload(numberOfFiles)
//  Number of files to download (& reserve) the loading bar
exports.toDownload = function ( numberOfFiles ) {
  for (var i = 0; i < numberOfFiles; i++) {
    var loadingBar = document.createElement('div');
    loadingBar.classList.add('loading-bar');
    loadingBar.style.width = '0%';
    loadingBar.style.opacity = '100%';
    GUI_loading.appendChild(loadingBar);
  }
}

//  ----------------------------------------------------------------------------
//  ## loadingbar.update(index, progress)
//  Update loading progress at index (0 to numberOfFiles-1).
//  progress should be between 0 and 100.
exports.update = function ( index, progress ) {
  GUI_loading.children[index].style.width = progress + '%';
}

exports.complete = function ( index ) {
  GUI_loading.children[index].style.width = '100%';

  for (var i = 0; i < GUI_loading.children.length; i++) {
    if (GUI_loading.children[i].style.width != '100%') return;
  }

  GUI_loading.style.opacity = 0;
  window.setTimeout(function () {
    GUI_loading.style.display = "none";
  }, 1000);
  if (typeof cb === 'function') cb();
}

exports.then = function ( callback ) {
  cb = callback;
}
},{}],5:[function(require,module,exports){
/**
 * Vector-based spherical projection of our planet earth
 * Author: Xavier Ho <xavier.ho@csiro.au>
 * See README.md for licenses and credits.
 */
var renderer = require('./renderer');
var shaders = require('./shaders');
var xhr = new THREE.XHRLoader();

exports.earth = function () {
  //-------------------------------------------------------------------------
  //  Fetch our earth

  xhr.load('data/land-topo.json', function (data) {
    var earth = {};
    earth.data = JSON.parse(data);
    earth.mesh = new THREE.Object3D();
    earth.shader = shaders['ubershader'];
    earth.material = new THREE.ShaderMaterial({
      uniforms: THREE.UniformsUtils.clone(earth.shader.uniforms),
      vertexShader: earth.shader.vertexShader,
      fragmentShader: earth.shader.fragmentShader,
      depthTest: false,
      transparent: true,
      wireframe: true
    });
    earth.material.uniforms.staticValue.value = 1;

    topojson.feature(earth.data, earth.data.objects.land).features.forEach(function (feature) {
      feature.geometry.coordinates.forEach(function (polygons) {
        var geometry = new THREE.Geometry();
        polygons.forEach(function (coordinates) {
          geometry.vertices.push(new THREE.Vector3(coordinates[0], coordinates[1], 0));
        });
        var mesh = new THREE.Line(geometry, earth.material);
        mesh.frustumCulled = false;
        earth.mesh.add(mesh);
      });
    });

    earth.ready = true;
    renderer.add(earth.mesh);
    renderer.setVisibleDistance(earth, 200, 1000000);
  });

  //-------------------------------------------------------------------------
  //  Grab a copy of Australia

  xhr.load('data/australia-topo.json', function (data) {
    var australia = {};
    australia.data = JSON.parse(data);
    australia.mesh = new THREE.Object3D();
    australia.shader = shaders['ubershader'];
    australia.material = new THREE.ShaderMaterial({
      uniforms: THREE.UniformsUtils.clone(australia.shader.uniforms),
      vertexShader: australia.shader.vertexShader,
      fragmentShader: australia.shader.fragmentShader,
      depthTest: false,
      transparent: true,
      wireframe: true
    });
    australia.material.uniforms.staticValue.value = 1;
    australia.material.uniforms.opacity.value = 0;

    topojson.feature(australia.data, australia.data.objects.australia).features.forEach(function (feature) {
      feature.geometry.coordinates.forEach(function (multipolygons) {
        multipolygons.forEach(function (polygons) {
          var geometry = new THREE.Geometry();
          polygons.forEach(function (coordinates) {
            geometry.vertices.push(new THREE.Vector3(coordinates[0], coordinates[1], 0));
          });
          var mesh = new THREE.Line(geometry, australia.material);
          mesh.frustumCulled = false;
          australia.mesh.add(mesh);
        });
      });
    });

    australia.ready = true;
    renderer.add(australia.mesh);
    renderer.setVisibleDistance(australia, 120, 250);
  });

  //-------------------------------------------------------------------------
  //  Retrieve the state boundary of New South Wales

  xhr.load('data/nsw-topo.json', function (data) {
    var nsw = {};
    nsw.data = JSON.parse(data);
    nsw.mesh = new THREE.Object3D();
    nsw.shader = shaders['ubershader'];
    nsw.material = new THREE.ShaderMaterial({
      uniforms: THREE.UniformsUtils.clone(nsw.shader.uniforms),
      vertexShader: nsw.shader.vertexShader,
      fragmentShader: nsw.shader.fragmentShader,
      depthTest: false,
      transparent: true,
      wireframe: true
    });
    nsw.material.uniforms.staticValue.value = 1;
    nsw.material.uniforms.opacity.value = 0;

    topojson.feature(nsw.data, nsw.data.objects.nsw).features.forEach(function (feature) {
      feature.geometry.coordinates.forEach(function (polygons) {
        var geometry = new THREE.Geometry();
        polygons.forEach(function (coordinates) {
          geometry.vertices.push(new THREE.Vector3(coordinates[0], coordinates[1], 0));
        });
        var mesh = new THREE.Line(geometry, nsw.material);
        mesh.frustumCulled = false;
        nsw.mesh.add(mesh);
      });
    });

    nsw.ready = true;
    renderer.add(nsw.mesh);
    renderer.setVisibleDistance(nsw, 5, 130);
  });
};

},{"./renderer":6,"./shaders":8}],6:[function(require,module,exports){
/**
 * Web-based renderer with mouse-first controls
 * Author: Xavier Ho <xavier.ho@csiro.au>
 * See README.md for licenses and credits.
 */

// -----------------------------------------------------------------------------
// # Constants and variables
var PI_HALF = Math.PI / 2;

var mouse = { x: 0, y: 0 },         // current mouse location
    rotation = { x: 0, y: 0 },      // current camera rotation wrt world origin
    mouseOnDown = { x: 0, y: 0 },   // mouse click location on click
    targetOnDown = { x: 0, y: 0 },  // camera rotation on click
    pinchStart = 0,                 // Starting pinch distance
    target = { x: 0,                // target camera rotation to move to,
               y: 0 },              // in this case, that's Australia :)
    distance = 1000,                // current distance from camera to origin
    distanceTarget = 1000,          // target distance to move camera to
    cameraTarget = new THREE.Vector3(0, 0, 0);

// -----------------------------------------------------------------------------
// # Renderer managers and containers
var container = exports.container = document.getElementById('container');
var view = {
  w: container.offsetWidth || window.innerWidth,
  h: container.offsetHeight || window.innerHeight
};
var camera = new THREE.PerspectiveCamera(30, view.w / view.h, 0.1, 1000);
var scene = exports.scene = new THREE.Scene();
var renderer = exports.renderer = new THREE.WebGLRenderer({
  antialias: true,
  alpha: true,
});

//  ----------------------------------------------------------------------------
//  ## add(object)
//  Include the object for render. Object must have property object.mesh that is
//  a threejs Mesh instance.
exports.add = function ( mesh ) {
  scene.add(mesh);
};

//  ----------------------------------------------------------------------------
//  ## render(setup, update)
//  Inits the render loop, runs setup(), and calls update() every draw frame.
exports.render = function render ( setup, update ) {
  init();
  setup();

  (function loop () {
    requestAnimationFrame(loop);
    update();
    updateLOD();
    draw();
  }());
};

function init () {
  camera.position.z = distance;

  renderer.setSize(view.w, view.h);
  renderer.domElement.style.position = 'absolute';
  container.appendChild(renderer.domElement);

  container.addEventListener('mousedown', onMouseDown, false);
  container.addEventListener('touchstart', onTouchStart, false);
  container.addEventListener('touchmove', onTouchMove, false);
  window.addEventListener('mousewheel', onMouseWheel, false);
  window.addEventListener('DOMMouseScroll', onMouseWheel, false); // Firefox
  window.addEventListener('resize', onWindowResize, false);
  // window.addEventListener('keydown', onKeyDown, false);
}

function draw () {
  distance += (distanceTarget - distance) * 0.075;
  rotation.x += (target.x - rotation.x) * 0.1;
  rotation.y += (target.y - rotation.y) * 0.1;

  camera.position.x = distance * Math.sin(rotation.x) * Math.cos(rotation.y);
  camera.position.y = distance * Math.sin(rotation.y);
  camera.position.z = distance * Math.cos(rotation.x) * Math.cos(rotation.y);

  camera.lookAt(cameraTarget);
  renderer.render(scene, camera);
}

// -----------------------------------------------------------------------------
// # Level of Detail visibility controls
//
//  o ---- LODDistance[0] ---- closeFade ---- LODDistance[1] ---- farFade
//  [invisible]         [fadeIn]       [visible]           [fadeOut]
//
//  ## setVisibleDistance(obj, min, max)
//  Adds obj to the LOD controller, with [min, max] being visible, otherwise
//  gently fades it out of view.
var LODObjects = [];
var setVisibleDistance = exports.setVisibleDistance = function ( obj, min, max ) {
  obj.LODDistance = [min, max];
  LODObjects.push(obj);
};

function updateLOD () {
  LODObjects.forEach(function (object) {
    if (!object.ready) { return; }

    var closeFade = Math.min(object.LODDistance[0] * 1.75, object.LODDistance[1]);
    var farFade = object.LODDistance[1] * 1.75;
    var opacity;

    if (distance < object.LODDistance[0] || distance >= farFade) {
      opacity = 0;

    } else if (distance >= object.LODDistance[0] && distance < closeFade) {
      opacity = (distance - object.LODDistance[0]) / (closeFade - object.LODDistance[0]);

    } else if (distance >= closeFade && distance < object.LODDistance[1]) {
      opacity = 1;

    } else if (distance >= object.LODDistance[1] && distance < farFade) {
      opacity = 1 - (distance - object.LODDistance[1]) / (farFade - object.LODDistance[1]);

    } else {
      console.warn('Level of details glitched :[');
      return;
    }

    if (object.material.uniforms) {
      object.material.uniforms.opacity.value = opacity;
    } else {
      object.material.opacity = opacity;
    }
  });
}

// -----------------------------------------------------------------------------
// # User input events
function onMouseDown ( event ) {
  event.preventDefault();

  container.addEventListener('mousemove', onMouseMove, false);
  container.addEventListener('mouseup', onMouseUp, false);
  container.addEventListener('mouseout', onMouseUp, false);

  mouseOnDown.x = -event.clientX;
  mouseOnDown.y = event.clientY;

  targetOnDown.x = target.x;
  targetOnDown.y = target.y;

  container.style.cursor = 'move';
}

function onMouseMove ( event ) {
  mouse.x = -event.clientX;
  mouse.y = event.clientY;

  var zoomDamp = (distance * distance) / 10000;

  target.x = targetOnDown.x + (mouse.x - mouseOnDown.x) * 0.0001 * zoomDamp;
  target.y = targetOnDown.y + (mouse.y - mouseOnDown.y) * 0.0001 * zoomDamp;

  target.y = target.y > PI_HALF ? PI_HALF : target.y;
  target.y = target.y < - PI_HALF ? -PI_HALF : target.y;
}

function onKeyDown ( event ) {
  var keyCode = event.keyCode;
  if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) return;
  if (keyCode === 38) { // up
    target.y -= 0.1;
  } else if (keyCode === 39) { // right
    target.x -= 0.1;
  } else if (keyCode === 40) { // down
    target.y += 0.1;
  } else if (keyCode === 37) { // left
    target.x += 0.1;
  }

  target.y = target.y > PI_HALF ? PI_HALF : target.y;
  target.y = target.y < - PI_HALF ? -PI_HALF : target.y;
}

function onMouseUp ( event ) {
  container.removeEventListener('mousemove', onMouseMove, false);
  container.removeEventListener('mouseup', onMouseUp, false);
  container.removeEventListener('mouseout', onMouseUp, false);
  container.style.cursor = 'auto';
}

function onTouchStart ( event ) {
  if (event.targetTouches.length === 1) {

    var touch = event.targetTouches[0];
    mouseOnDown.x = -touch.pageX;
    mouseOnDown.y = touch.pageY;

    targetOnDown.x = target.x;
    targetOnDown.y = target.y;

  } else if (event.targetTouches.length === 2) {

    var t1 = event.targetTouches[0],
        t2 = event.targetTouches[1];

    pinchStart = Math.sqrt(Math.pow(t2.pageX - t1.pageX, 2) + Math.pow(t2.pageY - t1.pageY, 2));

  }
}

function onTouchMove ( event ) {
  if (event.targetTouches.length === 1) {

    if (pinchStart > 0) return;

    var touch = event.targetTouches[0];
    mouse.x = -touch.pageX;
    mouse.y = touch.pageY;

    var zoomDamp = (distance * distance) / 5000;

    target.x = targetOnDown.x + (mouse.x - mouseOnDown.x) * 0.0001 * zoomDamp;
    target.y = targetOnDown.y + (mouse.y - mouseOnDown.y) * 0.0001 * zoomDamp;

    target.y = target.y > PI_HALF ? PI_HALF : target.y;
    target.y = target.y < - PI_HALF ? -PI_HALF : target.y;

    container.addEventListener('touchend', onTouchEnd, false);

  } else if (event.targetTouches.length === 2) {

    var t1 = event.targetTouches[0],
        t2 = event.targetTouches[1];
    var pinchDistance = Math.sqrt(Math.pow(t2.pageX - t1.pageX, 2) + Math.pow(t2.pageY - t1.pageY, 2));
    var zoomDistance = pinchDistance - pinchStart;
    pinchStart = pinchDistance;

    zoom(zoomDistance);

    container.addEventListener('touchend', onTouchEnd, false);
  }

  event.preventDefault();
}

function onTouchEnd ( event ) {
  if (event.targetTouches.length === 0) {
    container.removeEventListener('touchend', onTouchEnd, false);
    pinchStart = 0;
  }
}

function onWindowResize ( event ) {
  var w = view.w = container.offsetWidth || window.innerWidth;
  var h = view.h = container.offsetHeight || window.innerHeight;
  camera.aspect = w / h;
  camera.updateProjectionMatrix();
  renderer.setSize( w, h );
}

var onMouseWheel = exports.onMouseWheel = function ( event ) {
  event.preventDefault();

  // Chrome || IE || Firefox
  var delta = event.wheelDeltaY || event.wheelDelta || -event.detail*10;
  zoom(delta * 0.17);
  return false;
}

function zoom ( delta ) {
  distanceTarget -= delta;
  distanceTarget = distanceTarget > 500 ? 500 : distanceTarget;
  distanceTarget = distanceTarget < 108 ? 108 : distanceTarget;
}

//  ----------------------------------------------------------------------------
//  ## zoomTo(distance, x, y)
//  Sets the camera target to a specific distance and <x, y> coordinates in
//  spherical radians.
exports.zoomTo = function ( distance, x, y ) {
  distanceTarget = distance;
  target.x = x;
  target.y = y;
}

exports.debug = function ( text, replace ) {
  var el = document.getElementById('debug');
  if (!replace)
    el.innerHTML += JSON.stringify(text) + '<br>';
  else
    el.innerHTML = JSON.stringify(text) + '<br>';
}

//  ----------------------------------------------------------------------------
//  ## queryState()
//  Returns a collection of resources used internally by the renderer for hooks
//  and precise reference patching.
exports.queryState = function () {
  return {
    camera: camera,
    container: container,
    distance: distance,
    distanceTarget: distanceTarget,
    mouse: mouse,
    mouseOnDown: mouseOnDown,
    renderer: renderer,
    rotation: rotation,
    scene: scene,
    target: target,
    targetOnDown: targetOnDown,
  };
};

},{}],7:[function(require,module,exports){
/**
 * Web-based air quality data visualisation for Martin Cope and O&A, CSIRO.
 * Author: Xavier Ho <xavier.ho@csiro.au>
 * See README.md for licenses and credits.
 */
var renderer = require('./renderer');

// Objects to manage
var objects = exports.objects = [];

exports.manage = function (object, updateFunc) {
  if (typeof undateFunc !== 'function') {
    console.error('Update funtion not specified for ' + object);
  }
  objects.push({
    object: object,
    update: updateFunc
  });
  renderer.add(object.mesh);
};

exports.update = function () {
  objects.forEach( function (object) {
    object.update( object.object );
  });
};
},{"./renderer":6}],8:[function(require,module,exports){
exports.ubershader = {
  uniforms: {
    map: {type: 't', value: null},
    time: {type: 'f', value: 0.0},
    opacity: {type: 'f', value: 1.0},
    radius: {type: 'f', value: 100.0},
    staticValue:  {type: 'f', value: 0.0},
    normalValue: {type: 'f', value: 1.0},
    minValue: {type: 'f', value: 0.0},
    size: {type: 'f', value: 1.0},
    scale: { type: 'f', value: 0.0 },
    r: {type: 'f', value: 1.0},
    g: {type: 'f', value: 1.0},
    b: {type: 'f', value: 1.0}
  },
  vertexShader: [
    'uniform float radius, scale, size;',
    'varying vec3 vNormal;',
    'varying vec2 vUv;',
    'varying vec3 vPosition;',
    'void main() {',
      'float longitude = radians(position.x);',
      'float latitude = radians(position.y);',
      'vPosition = position;',
      'vUv = uv;',

      'float r = radius;',
      'vec4 sphericalPosition = vec4( r * cos(latitude) * cos (longitude),',
      '                               r * cos(latitude) * sin (longitude),',
      '                               r * sin(latitude),',
      '                               1.0 );',
      'sphericalPosition.xyz = sphericalPosition.xzy;',
      'sphericalPosition.x *= -1.0;',

      'vNormal = normalize(normalMatrix * sphericalPosition.xyz);',
      'vec4 mvPosition = modelViewMatrix * sphericalPosition;',
      'gl_PointSize = (size + clamp(vPosition.z * scale, 0.0, 5.0)) * (100.0 / length(mvPosition.xyz));',
      'gl_Position = projectionMatrix * mvPosition;',
    '}'
  ].join('\n'),
  fragmentShader: [
    'uniform float r, g, b, opacity;',
    'uniform float normalValue, minValue, staticValue;',
    'varying vec3 vNormal;',
    'varying vec3 vPosition;',

    'void main() {',
      'float view = ( dot( vNormal, vec3( 0.0, 0.0, 1.0 ) ) + 1.0 ) / 2.0;',
      'float value = max(vPosition.z * step(minValue, vPosition.z), staticValue);',
      'float normalisedValue = value / normalValue;',
      'float cappedValue = clamp(normalisedValue, 0.0, 1.0);',
      'gl_FragColor = vec4(vec3(r, g, b) * cappedValue, opacity * cappedValue) * view;',
    '}'
  ].join('\n')
};

exports.pointcloud = {
   fragmentShader: [
    'uniform float r, g, b, opacity, time;',
    'uniform float normalValue, minValue;',
    'varying vec3 vNormal;',
    'varying vec3 vPosition;',

    'void main() {',
      'float view = ( dot( vNormal, vec3( 0.0, 0.0, 1.0 ) ) + 1.0 ) / 2.0;',
      'float value = vPosition.z + minValue;',
      'float normalisedValue = value / normalValue;',
      'float cappedValue = clamp(normalisedValue, 0.0, 1.0);',
      'float radial = smoothstep(0.0, 0.4, 1.0 - length(gl_PointCoord.xy * 2.0 - vec2(1.0)));',
      'gl_FragColor = vec4(vec3(r, g, b) * cappedValue, opacity * radial) * view;',
    '}'
  ].join('\n')
}

exports.image = {
  fragmentShader: [
    'uniform sampler2D map;',
    'uniform float opacity, time;',
    'varying vec3 vPosition;',
    'varying vec3 vNormal;',
    'varying vec2 vUv;',

    'void main() {',
      'float view = ( dot( vNormal, vec3( 0.0, 0.0, 1.0 ) ) + 1.0 ) / 2.0;',
      'vec4 colour = texture2D(map, vUv);',
      'gl_FragColor = colour * view;',
    '}'
  ].join('\n')
}
},{}],9:[function(require,module,exports){
/**
 * Web-based air quality data visualisation for Martin Cope and O&A, CSIRO.
 * Author: Xavier Ho <xavier.ho@csiro.au>
 * See README.md for licenses and credits.
 */
var geo = require('./geo');
var clock = require('./clock');
var planet = require('./planet');
var shaders = require('./shaders');
var renderer = require('./renderer');
var geoutils = require('./geoutils');
var loadingbar = require('./loadingbar');
var xhr = new THREE.XHRLoader();

// -----------------------------------------------------------------------------
// # Object container references
var aus_point_emissions = {},
    aus_inland_point_emissions = {},
    nsw_pollution_3k_PM25 = {},
    nsw_pollution_1k_PM25 = {},
    aus_pollution_PM25 = {},
    nsw_shipping_3k_PM25 = {},
    nsw_shipping_1k_PM25 = {},
    aus_shipping_PM25 = {},
    nsw_ships_pointclouds = {},
    data_boundaries = [];

var plume_min = 0.14,
    plume_max = 2.163,
    pollution_min = 1.75,
    pollution_max = 295;

var zoomLevel = {
  earth:      { distance: 500, x: 0.8121975, y: -0.4883185 },
  australia:  { distance: 250, x: 0.8121975, y: -0.4883185 },
  nsw:        { distance: 150, x: 1.00182605, y: -0.5796645 },
  sydney:     { distance: 110, x: 1.066858, y: -0.5887605 },
};

function zoomTo (key) {
  renderer.zoomTo(zoomLevel[key].distance, zoomLevel[key].x, zoomLevel[key].y);
}

// ----------------------------------------------------------------------------
// # GUI - Screen space controls
var GUI_time = document.getElementById('time');
var GUI_tools = document.getElementById('tools');
var GUI_header = document.getElementById('header');
var GUI_footer = document.getElementById('footer');
var GUI_zoomLevel = document.getElementById('focus');
var GUI_controls = document.getElementById('controls');
var GUI_show_PM25 = document.getElementById('show_PM25');
var GUI_show_inland = document.getElementById('show_inland');
var GUI_show_shipping = document.getElementById('show_shipping');
var GUI_show_pointsources = document.getElementById('show_pointsources');
var GUI_start_presentation = document.getElementById('start_presentation');
var GUI_show_dataBoundaries = document.getElementById('show_dataBoundaries');

// ----------------------------------------------------------------------------
// # Bam. (Entry point.)
renderer.render( function () {
  planet.earth();
  setup();
}, function () {
  update();
});

// ----------------------------------------------------------------------------
// # Load all the data for viz
function setup () {
  renderer.container.style.opacity = 1;
  zoomTo('australia');
  loadingbar.toDownload(9);

  var presentation;
  GUI_start_presentation.addEventListener('click', function ( event ) {
    var keys = Object.keys(zoomLevel);
    var i = 0;
    function present () {
      zoomTo(keys[++i % 4]);
    }

    if (event.target.checked) {
      presentation = window.setInterval(present, 60000);
    } else {
      window.clearInterval(presentation);
    }
  });

  GUI_zoomLevel.addEventListener('change', function ( event ) {
    zoomTo(event.target.value);
  });

  GUI_show_pointsources.addEventListener('click', function (event) {
    aus_point_emissions.mesh.visible = !!event.target.checked;
    nsw_ships_pointclouds.mesh.visible = !event.target.checked;
  });

  GUI_show_PM25.addEventListener('click', function (event) {
    nsw_pollution_3k_PM25.mesh.visible = !!event.target.checked;
    nsw_pollution_1k_PM25.mesh.visible = !!event.target.checked;
    aus_pollution_PM25.mesh.visible = !!event.target.checked;
  });

  GUI_show_inland.addEventListener('click', function (event) {
    aus_inland_point_emissions.mesh.visible = !!event.target.checked;
  });

  GUI_show_shipping.addEventListener('click', function (event) {
    nsw_shipping_3k_PM25.mesh.visible = !!event.target.checked;
    nsw_shipping_1k_PM25.mesh.visible = !!event.target.checked;
    aus_shipping_PM25.mesh.visible = !!event.target.checked;
  });

  GUI_show_dataBoundaries.addEventListener('click', function (event) {
    for (var i = 0; i < data_boundaries.length; i++) {
      data_boundaries[i].visible = !!event.target.checked;
    }
  });

  // --------------------------------------------------------------------------
  // # Load converted netCDF files

  geo.load2DGrid('data/data-aus-PM25.json',
    function (object) {
      aus_pollution_PM25 = object;

      // Colour
      aus_pollution_PM25.material.uniforms.r.value = 42 / 255.0;
      aus_pollution_PM25.material.uniforms.g.value = 169 / 255.0;
      aus_pollution_PM25.material.uniforms.b.value = 252 / 255.0;
      // Threshold
      aus_pollution_PM25.material.uniforms.minValue.value = pollution_min;
      // Saturate point
      aus_pollution_PM25.material.uniforms.normalValue.value = pollution_max;

      var boundary = geoutils.makeBoundary(aus_pollution_PM25.data[0].boundary);
      boundary.visible = false;
      data_boundaries.push(boundary);
      renderer.add(boundary)

      aus_pollution_PM25.mesh.visible = true;
      renderer.add(aus_pollution_PM25.mesh);
      loadingbar.complete(0);
    },
    function (progress) {
      loadingbar.update(0, progress.loaded / 6952429 * 100);
    }
  );

  geo.load2DGrid('data/data-nsw-3k-PM25.json',
    function (object) {
      nsw_pollution_3k_PM25 = object;

      // Colour
      nsw_pollution_3k_PM25.material.uniforms.r.value = 42 / 255.0;
      nsw_pollution_3k_PM25.material.uniforms.g.value = 169 / 255.0;
      nsw_pollution_3k_PM25.material.uniforms.b.value = 252 / 255.0;
      // Threshold
      nsw_pollution_3k_PM25.material.uniforms.minValue.value = pollution_min;
      // Saturate point
      nsw_pollution_3k_PM25.material.uniforms.normalValue.value = pollution_max;

      var boundary = geoutils.makeBoundary(nsw_pollution_3k_PM25.data[0].boundary);
      boundary.visible = false;
      data_boundaries.push(boundary);
      renderer.add(boundary);

      nsw_pollution_3k_PM25.mesh.visible = true;
      renderer.add(nsw_pollution_3k_PM25.mesh);
      loadingbar.complete(1);
    },
    function (progress) {
      loadingbar.update(1, progress.loaded / 6853152 * 100);
    }
  );

  geo.load2DGrid('data/data-nsw-1k-PM25.json',
    function (object) {
      nsw_pollution_1k_PM25 = object;

      // Colour
      nsw_pollution_1k_PM25.material.uniforms.r.value = 42 / 255.0;
      nsw_pollution_1k_PM25.material.uniforms.g.value = 169 / 255.0;
      nsw_pollution_1k_PM25.material.uniforms.b.value = 252 / 255.0;
      // Threshold
      nsw_pollution_1k_PM25.material.uniforms.minValue.value = pollution_min;
      // Saturate point
      nsw_pollution_1k_PM25.material.uniforms.normalValue.value = pollution_max;

      var boundary = geoutils.makeBoundary(nsw_pollution_1k_PM25.data[0].boundary);
      boundary.visible = false;
      data_boundaries.push(boundary);
      renderer.add(boundary);

      nsw_pollution_1k_PM25.mesh.visible = true;
      renderer.add(nsw_pollution_1k_PM25.mesh);
      loadingbar.complete(2);
    },
    function (progress) {
      loadingbar.update(2, progress.loaded / 6914609 * 100);
    }
  );

  //-------------------------------------------------------------------------
  // Shipping
  geo.load2DGrid('data/data-aus-shipping.json',
    function (object) {
      aus_shipping_PM25 = object;

      // Colour
      aus_shipping_PM25.material.uniforms.r.value = 252 / 255.0;
      aus_shipping_PM25.material.uniforms.g.value = 252 / 255.0;
      aus_shipping_PM25.material.uniforms.b.value = 151 / 255.0;
      // Threshold
      aus_shipping_PM25.material.uniforms.minValue.value = plume_min;
      // Saturate point
      aus_shipping_PM25.material.uniforms.normalValue.value = plume_max;

      renderer.add(aus_shipping_PM25.mesh);
      loadingbar.complete(3);
    },
    function (progress) {
      loadingbar.update(3, progress.loaded / 5813294 * 100);
    }
  );

  geo.load2DGrid('data/data-nsw-3k-shipping.json',
    function (object) {
      nsw_shipping_3k_PM25 = object;

      // Colour
      nsw_shipping_3k_PM25.material.uniforms.r.value = 252 / 255.0;
      nsw_shipping_3k_PM25.material.uniforms.g.value = 252 / 255.0;
      nsw_shipping_3k_PM25.material.uniforms.b.value = 151 / 255.0;
      // Threshold
      nsw_shipping_3k_PM25.material.uniforms.minValue.value = plume_min;
      // Saturate point
      nsw_shipping_3k_PM25.material.uniforms.normalValue.value = plume_max;

      renderer.add(nsw_shipping_3k_PM25.mesh);
      loadingbar.complete(4);
    },
    function (progress) {
      loadingbar.update(4, progress.loaded / 7183417 * 100);
    }
  );

  geo.load2DGrid('data/data-nsw-1k-shipping.json',
    function (object) {
      nsw_shipping_1k_PM25 = object;

      nsw_shipping_1k_PM25.material.uniforms.r.value = 252 / 255.0;
      nsw_shipping_1k_PM25.material.uniforms.g.value = 252 / 255.0;
      nsw_shipping_1k_PM25.material.uniforms.b.value = 151 / 255.0;
      // Threshold
      nsw_shipping_1k_PM25.material.uniforms.minValue.value = plume_min;
      // Saturate point
      nsw_shipping_1k_PM25.material.uniforms.normalValue.value = plume_max;

      renderer.add(nsw_shipping_1k_PM25.mesh);
      loadingbar.complete(5);
    },
    function (progress) {
      loadingbar.update(5, progress.loaded / 7480102 * 100);
    }
  );

  geo.loadPoints('data/data-pointsources-shipping.json',
    function (object) {
      aus_inland_point_emissions = object;

      aus_inland_point_emissions.material.uniforms.r.value = 252 / 255.0;
      aus_inland_point_emissions.material.uniforms.g.value = 151 / 255.0;
      aus_inland_point_emissions.material.uniforms.b.value = 151 / 255.0;
      aus_inland_point_emissions.material.uniforms.scale.value = 1;
      aus_inland_point_emissions.material.uniforms.size.value = 0;
      aus_inland_point_emissions.material.uniforms.minValue.value = 1;
      renderer.add(aus_inland_point_emissions.mesh);
      loadingbar.complete(6);
    },
    function (progress) {
        loadingbar.update(6, progress.loaded / 8594961 * 100);
    }
  );

  geo.loadPoints('data/data-aus-pointsources.json',
    function (object) {
      aus_point_emissions = object;

      aus_point_emissions.material.uniforms.r.value = 252 / 255.0;
      aus_point_emissions.material.uniforms.g.value = 252 / 255.0;
      aus_point_emissions.material.uniforms.b.value = 151 / 255.0;
      aus_point_emissions.material.uniforms.scale.value = 1;
      aus_point_emissions.material.uniforms.size.value = 0;
      aus_point_emissions.material.uniforms.minValue.value = 1;
      aus_point_emissions.mesh.visible = false;
      renderer.add(aus_point_emissions.mesh);
      loadingbar.complete(7);
    },
    function (progress) {
        loadingbar.update(7, progress.loaded / 8594961 * 100);
    }
  );

  geo.loadPoints('data/data-pointsources-3k.json',
    function (object) {
      nsw_ships_pointclouds = object;

      nsw_ships_pointclouds.material.uniforms.r.value = 252 / 255.0;
      nsw_ships_pointclouds.material.uniforms.g.value = 252 / 255.0;
      nsw_ships_pointclouds.material.uniforms.b.value = 151 / 255.0;
      nsw_ships_pointclouds.material.uniforms.scale.value = 1;
      nsw_ships_pointclouds.material.uniforms.size.value = 0.25;
      nsw_ships_pointclouds.material.uniforms.minValue.value = 1;
      renderer.add(nsw_ships_pointclouds.mesh);
      loadingbar.complete(8);
    },
    function (progress) {
      loadingbar.update(8, progress.loaded / 2163287 * 100);
    }
  );

} // end setup

function update () {
  var distanceTarget = renderer.queryState().distanceTarget;
  var time = clock.tick();

  // Update GUI Timestamp
  if (aus_pollution_PM25.ready) {
    var i = Math.floor(time) % aus_pollution_PM25.data.length;
    if (aus_pollution_PM25.data[i].timestamp) {
      GUI_time.timestamp = aus_pollution_PM25.data[i].timestamp;
      GUI_time.innerHTML = moment(aus_pollution_PM25.data[i].timestamp).format('LLLL');
    }
  }

  geo.update2DGrid(aus_pollution_PM25);
  geo.update2DGrid(nsw_pollution_3k_PM25);
  geo.update2DGrid(nsw_pollution_1k_PM25);
  geo.update2DGrid(aus_shipping_PM25);
  geo.update2DGrid(nsw_shipping_3k_PM25);
  geo.update2DGrid(nsw_shipping_1k_PM25);
  geo.updatePoints(aus_inland_point_emissions);
  geo.updatePoints(nsw_ships_pointclouds);

  if (distanceTarget <= zoomLevel.sydney.distance) {
    GUI_zoomLevel.options[3].selected = true;
  } else if (distanceTarget <= zoomLevel.nsw.distance) {
    GUI_zoomLevel.options[2].selected = true;
  } else if (distanceTarget <= zoomLevel.australia.distance) {
    GUI_zoomLevel.options[1].selected = true;
  } else {
    GUI_zoomLevel.options[0].selected = true;
  }
}

// ----------------------------------------------------------------------------
// # Hook up scroll event for GUI
GUI_controls.addEventListener('mousewheel', renderer.onMouseWheel);
GUI_footer.addEventListener('mousewheel', renderer.onMouseWheel);
GUI_header.addEventListener('mousewheel', renderer.onMouseWheel);
loadingbar.GUI.addEventListener('mousewheel', renderer.onMouseWheel);

// ----------------------------------------------------------------------------
// # Hide and show tools
var GUI_controls_hide = true;
var GUI_tools_hide = true;
window.addEventListener('keypress', function ( event ) {
  var k = String.fromCharCode(event.which);
  if (k === 'h') {
    GUI_controls_hide = !GUI_controls_hide;
    GUI_controls.style.opacity = GUI_controls_hide ? 0 : 1;
  } else if (k === 't') {
    GUI_tools_hide = !GUI_tools_hide;
    GUI_tools.style.opacity = GUI_tools_hide ? 0 : 1;
  }
});


// ----------------------------------------------------------------------------
// # Debug tools
var GUI_tool_plume_min = document.getElementById('tool-plume-min');
var GUI_tool_plume_min_display = document.getElementById('tool-plume-min-display');
GUI_tool_plume_min.value = GUI_tool_plume_min_display.textContent = plume_min;
GUI_tool_plume_min.addEventListener('input', function ( event ) {
  if (aus_shipping_PM25.ready) {
    aus_shipping_PM25.material.uniforms.minValue.value = Number(event.target.value);
    nsw_shipping_3k_PM25.material.uniforms.minValue.value = Number(event.target.value);
    nsw_shipping_1k_PM25.material.uniforms.minValue.value = Number(event.target.value);
    GUI_tool_plume_min_display.textContent = event.target.value;
  }
});

var GUI_tool_plume = document.getElementById('tool-plume');
var GUI_legend_plume = document.getElementById('legend-plume-max');
var GUI_tool_plume_display = document.getElementById('tool-plume-display');
GUI_tool_plume.value = GUI_tool_plume_display.textContent = GUI_legend_plume.textContent = plume_max;
GUI_tool_plume.addEventListener('input', function ( event ) {
  if (aus_shipping_PM25.ready) {
    aus_shipping_PM25.material.uniforms.normalValue.value = Number(event.target.value);
    nsw_shipping_3k_PM25.material.uniforms.normalValue.value = Number(event.target.value);
    nsw_shipping_1k_PM25.material.uniforms.normalValue.value = Number(event.target.value);
    GUI_tool_plume_display.textContent = event.target.value;
    GUI_legend_plume.textContent = event.target.value;
  }
});

var GUI_tool_smoke_min = document.getElementById('tool-smoke-min');
var GUI_tool_smoke_min_display = document.getElementById('tool-smoke-min-display');
GUI_tool_smoke_min.value = GUI_tool_smoke_min_display.textContent = pollution_min;
GUI_tool_smoke_min.addEventListener('input', function ( event ) {
  if (aus_pollution_PM25.ready) {
    aus_pollution_PM25.material.uniforms.minValue.value = Number(event.target.value);
    GUI_tool_smoke_min_display.textContent = event.target.value;
  }
});

var GUI_tool_smoke = document.getElementById('tool-smoke');
var GUI_legend_pm25 = document.getElementById('legend-pm25-max');
var GUI_tool_smoke_display = document.getElementById('tool-smoke-display');
GUI_tool_smoke.value = GUI_tool_smoke_display.textContent = GUI_legend_pm25.textContent = pollution_max;
GUI_tool_smoke.addEventListener('input', function ( event ) {
  if (aus_pollution_PM25.ready) {
    aus_pollution_PM25.material.uniforms.normalValue.value = Number(event.target.value);
    nsw_pollution_3k_PM25.material.uniforms.normalValue.value = Number(event.target.value);
    nsw_pollution_1k_PM25.material.uniforms.normalValue.value = Number(event.target.value);
    GUI_tool_smoke_display.textContent = event.target.value;
    GUI_legend_pm25.textContent = event.target.value;
  }
});

var GUI_tool_speed = document.getElementById('tool-speed');
var GUI_tool_speed_display = document.getElementById('tool-speed-display');
GUI_tool_speed.addEventListener('input', function ( event ) {
  clock.setSpeed(event.target.value);
  GUI_tool_speed_display.textContent = event.target.value;
});

},{"./clock":1,"./geo":2,"./geoutils":3,"./loadingbar":4,"./planet":5,"./renderer":6,"./shaders":8}]},{},[1,2,3,4,5,6,7,8,9])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
